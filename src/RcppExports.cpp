// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gammaAccProb
List gammaAccProb(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double BIN, double BOUT, double alph, double bta, arma::colvec ww, double g2, double g2new);
RcppExport SEXP lsmdn_gammaAccProb(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP alphSEXP, SEXP btaSEXP, SEXP wwSEXP, SEXP g2SEXP, SEXP g2newSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< double >::type bta(btaSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< double >::type g2new(g2newSEXP);
    rcpp_result_gen = Rcpp::wrap(gammaAccProb(X, dims, Y, BIN, BOUT, alph, bta, ww, g2, g2new));
    return rcpp_result_gen;
END_RCPP
}
// gammaAccProbGaussian
List gammaAccProbGaussian(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double BIN, double BOUT, double alph, double bta, arma::colvec ww, double g2, double g2new);
RcppExport SEXP lsmdn_gammaAccProbGaussian(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP alphSEXP, SEXP btaSEXP, SEXP wwSEXP, SEXP g2SEXP, SEXP g2newSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< double >::type bta(btaSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< double >::type g2new(g2newSEXP);
    rcpp_result_gen = Rcpp::wrap(gammaAccProbGaussian(X, dims, Y, BIN, BOUT, alph, bta, ww, g2, g2new));
    return rcpp_result_gen;
END_RCPP
}
// imputeMissingBinomial
arma::cube imputeMissingBinomial(arma::cube X, Rcpp::IntegerVector dims, Rcpp::IntegerVector MM, arma::cube Y, int Ttt, double BIN, double BOUT, arma::colvec ww);
RcppExport SEXP lsmdn_imputeMissingBinomial(SEXP XSEXP, SEXP dimsSEXP, SEXP MMSEXP, SEXP YSEXP, SEXP TttSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP wwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type MM(MMSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Ttt(TttSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    rcpp_result_gen = Rcpp::wrap(imputeMissingBinomial(X, dims, MM, Y, Ttt, BIN, BOUT, ww));
    return rcpp_result_gen;
END_RCPP
}
// imputeMissingGaussian
arma::cube imputeMissingGaussian(arma::cube X, Rcpp::IntegerVector dims, Rcpp::IntegerVector MM, arma::cube Y, int Ttt, double BIN, double BOUT, arma::colvec ww, double g2);
RcppExport SEXP lsmdn_imputeMissingGaussian(SEXP XSEXP, SEXP dimsSEXP, SEXP MMSEXP, SEXP YSEXP, SEXP TttSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP wwSEXP, SEXP g2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type MM(MMSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Ttt(TttSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    rcpp_result_gen = Rcpp::wrap(imputeMissingGaussian(X, dims, MM, Y, Ttt, BIN, BOUT, ww, g2));
    return rcpp_result_gen;
END_RCPP
}
// imputeMissingPoisson
arma::cube imputeMissingPoisson(arma::cube X, Rcpp::IntegerVector dims, Rcpp::IntegerVector MM, arma::cube Y, int Ttt, double BIN, double BOUT, arma::colvec ww);
RcppExport SEXP lsmdn_imputeMissingPoisson(SEXP XSEXP, SEXP dimsSEXP, SEXP MMSEXP, SEXP YSEXP, SEXP TttSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP wwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type MM(MMSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type Ttt(TttSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    rcpp_result_gen = Rcpp::wrap(imputeMissingPoisson(X, dims, MM, Y, Ttt, BIN, BOUT, ww));
    return rcpp_result_gen;
END_RCPP
}
// initializeBinom
double initializeBinom(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double Xscale, double BIN, double BOUT, arma::colvec ww);
RcppExport SEXP lsmdn_initializeBinom(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP XscaleSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP wwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type Xscale(XscaleSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    rcpp_result_gen = Rcpp::wrap(initializeBinom(X, dims, Y, Xscale, BIN, BOUT, ww));
    return rcpp_result_gen;
END_RCPP
}
// initializeBinomGrad
arma::vec initializeBinomGrad(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double Xscale, double BIN, double BOUT, arma::colvec ww);
RcppExport SEXP lsmdn_initializeBinomGrad(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP XscaleSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP wwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type Xscale(XscaleSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    rcpp_result_gen = Rcpp::wrap(initializeBinomGrad(X, dims, Y, Xscale, BIN, BOUT, ww));
    return rcpp_result_gen;
END_RCPP
}
// postZeroProb
arma::vec postZeroProb(Rcpp::NumericMatrix xi1, Rcpp::NumericMatrix xi2, Rcpp::NumericMatrix xj1, Rcpp::NumericMatrix xj2, Rcpp::NumericVector ss2, double lam, double pp0);
RcppExport SEXP lsmdn_postZeroProb(SEXP xi1SEXP, SEXP xi2SEXP, SEXP xj1SEXP, SEXP xj2SEXP, SEXP ss2SEXP, SEXP lamSEXP, SEXP pp0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xi1(xi1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xi2(xi2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xj1(xj1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type xj2(xj2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ss2(ss2SEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type pp0(pp0SEXP);
    rcpp_result_gen = Rcpp::wrap(postZeroProb(xi1, xi2, xj1, xj2, ss2, lam, pp0));
    return rcpp_result_gen;
END_RCPP
}
// predictionBinomial
Rcpp::NumericMatrix predictionBinomial(Rcpp::NumericMatrix Ex, Rcpp::NumericVector sig2, Rcpp::NumericMatrix x1, Rcpp::NumericMatrix x2, Rcpp::NumericVector Bin, Rcpp::NumericVector Bout, Rcpp::NumericMatrix ww);
RcppExport SEXP lsmdn_predictionBinomial(SEXP ExSEXP, SEXP sig2SEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP BinSEXP, SEXP BoutSEXP, SEXP wwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Ex(ExSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Bin(BinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Bout(BoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ww(wwSEXP);
    rcpp_result_gen = Rcpp::wrap(predictionBinomial(Ex, sig2, x1, x2, Bin, Bout, ww));
    return rcpp_result_gen;
END_RCPP
}
// predictionGaussian
Rcpp::NumericMatrix predictionGaussian(Rcpp::NumericMatrix Ex, Rcpp::NumericVector sig2, Rcpp::NumericMatrix x1, Rcpp::NumericMatrix x2, Rcpp::NumericVector Bin, Rcpp::NumericVector Bout, Rcpp::NumericMatrix ww);
RcppExport SEXP lsmdn_predictionGaussian(SEXP ExSEXP, SEXP sig2SEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP BinSEXP, SEXP BoutSEXP, SEXP wwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Ex(ExSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Bin(BinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Bout(BoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ww(wwSEXP);
    rcpp_result_gen = Rcpp::wrap(predictionGaussian(Ex, sig2, x1, x2, Bin, Bout, ww));
    return rcpp_result_gen;
END_RCPP
}
// predictionPoisson
Rcpp::NumericMatrix predictionPoisson(Rcpp::NumericMatrix Ex, Rcpp::NumericVector sig2, Rcpp::NumericMatrix x1, Rcpp::NumericMatrix x2, Rcpp::NumericVector Bin, Rcpp::NumericVector Bout, Rcpp::NumericMatrix ww);
RcppExport SEXP lsmdn_predictionPoisson(SEXP ExSEXP, SEXP sig2SEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP BinSEXP, SEXP BoutSEXP, SEXP wwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Ex(ExSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Bin(BinSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Bout(BoutSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ww(wwSEXP);
    rcpp_result_gen = Rcpp::wrap(predictionPoisson(Ex, sig2, x1, x2, Bin, Bout, ww));
    return rcpp_result_gen;
END_RCPP
}
// t2s2Parms
List t2s2Parms(arma::cube X, Rcpp::IntegerVector dims, double thetaT, double thetaS, double phiT, double phiS);
RcppExport SEXP lsmdn_t2s2Parms(SEXP XSEXP, SEXP dimsSEXP, SEXP thetaTSEXP, SEXP thetaSSEXP, SEXP phiTSEXP, SEXP phiSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type thetaT(thetaTSEXP);
    Rcpp::traits::input_parameter< double >::type thetaS(thetaSSEXP);
    Rcpp::traits::input_parameter< double >::type phiT(phiTSEXP);
    Rcpp::traits::input_parameter< double >::type phiS(phiSSEXP);
    rcpp_result_gen = Rcpp::wrap(t2s2Parms(X, dims, thetaT, thetaS, phiT, phiS));
    return rcpp_result_gen;
END_RCPP
}
// updateBinom
List updateBinom(arma::cube Xitm1, Rcpp::IntegerVector dims, double tunex, arma::cube Y, double BIN, double BOUT, double tuneBIO, arma::colvec ww, double t2, double s2, double xiBin, double xiBout, double nuBin, double nuBout, int Cauchy, Rcpp::NumericVector rnormsVec, arma::colvec rnormsBIO);
RcppExport SEXP lsmdn_updateBinom(SEXP Xitm1SEXP, SEXP dimsSEXP, SEXP tunexSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneBIOSEXP, SEXP wwSEXP, SEXP t2SEXP, SEXP s2SEXP, SEXP xiBinSEXP, SEXP xiBoutSEXP, SEXP nuBinSEXP, SEXP nuBoutSEXP, SEXP CauchySEXP, SEXP rnormsVecSEXP, SEXP rnormsBIOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Xitm1(Xitm1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type tunex(tunexSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneBIO(tuneBIOSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type xiBin(xiBinSEXP);
    Rcpp::traits::input_parameter< double >::type xiBout(xiBoutSEXP);
    Rcpp::traits::input_parameter< double >::type nuBin(nuBinSEXP);
    Rcpp::traits::input_parameter< double >::type nuBout(nuBoutSEXP);
    Rcpp::traits::input_parameter< int >::type Cauchy(CauchySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rnormsVec(rnormsVecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type rnormsBIO(rnormsBIOSEXP);
    rcpp_result_gen = Rcpp::wrap(updateBinom(Xitm1, dims, tunex, Y, BIN, BOUT, tuneBIO, ww, t2, s2, xiBin, xiBout, nuBin, nuBout, Cauchy, rnormsVec, rnormsBIO));
    return rcpp_result_gen;
END_RCPP
}
// updateBinomLogLikeApprox
List updateBinomLogLikeApprox(arma::cube Xitm1, Rcpp::IntegerVector dims, double tunex, arma::cube Y, double BIN, double BOUT, double tuneBIO, arma::colvec ww, double t2, double s2, double xiBin, double xiBout, double nuBin, double nuBout, int Cauchy, Rcpp::NumericVector rnormsVec, arma::colvec rnormsBIO, arma::cube ELout, arma::cube ELin, Rcpp::IntegerMatrix subseq, arma::cube degr);
RcppExport SEXP lsmdn_updateBinomLogLikeApprox(SEXP Xitm1SEXP, SEXP dimsSEXP, SEXP tunexSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneBIOSEXP, SEXP wwSEXP, SEXP t2SEXP, SEXP s2SEXP, SEXP xiBinSEXP, SEXP xiBoutSEXP, SEXP nuBinSEXP, SEXP nuBoutSEXP, SEXP CauchySEXP, SEXP rnormsVecSEXP, SEXP rnormsBIOSEXP, SEXP ELoutSEXP, SEXP ELinSEXP, SEXP subseqSEXP, SEXP degrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Xitm1(Xitm1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type tunex(tunexSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneBIO(tuneBIOSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type xiBin(xiBinSEXP);
    Rcpp::traits::input_parameter< double >::type xiBout(xiBoutSEXP);
    Rcpp::traits::input_parameter< double >::type nuBin(nuBinSEXP);
    Rcpp::traits::input_parameter< double >::type nuBout(nuBoutSEXP);
    Rcpp::traits::input_parameter< int >::type Cauchy(CauchySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rnormsVec(rnormsVecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type rnormsBIO(rnormsBIOSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type ELout(ELoutSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type ELin(ELinSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type subseq(subseqSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type degr(degrSEXP);
    rcpp_result_gen = Rcpp::wrap(updateBinomLogLikeApprox(Xitm1, dims, tunex, Y, BIN, BOUT, tuneBIO, ww, t2, s2, xiBin, xiBout, nuBin, nuBout, Cauchy, rnormsVec, rnormsBIO, ELout, ELin, subseq, degr));
    return rcpp_result_gen;
END_RCPP
}
// updateGaussian
List updateGaussian(arma::cube Xitm1, Rcpp::IntegerVector dims, double tunex, arma::cube Y, double BIN, double BOUT, double tuneBIO, arma::colvec ww, double t2, double s2, double g2, double xiBin, double xiBout, double nuBin, double nuBout, int Cauchy, Rcpp::NumericVector rnormsVec, arma::colvec rnormsBIO);
RcppExport SEXP lsmdn_updateGaussian(SEXP Xitm1SEXP, SEXP dimsSEXP, SEXP tunexSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneBIOSEXP, SEXP wwSEXP, SEXP t2SEXP, SEXP s2SEXP, SEXP g2SEXP, SEXP xiBinSEXP, SEXP xiBoutSEXP, SEXP nuBinSEXP, SEXP nuBoutSEXP, SEXP CauchySEXP, SEXP rnormsVecSEXP, SEXP rnormsBIOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Xitm1(Xitm1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type tunex(tunexSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneBIO(tuneBIOSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< double >::type xiBin(xiBinSEXP);
    Rcpp::traits::input_parameter< double >::type xiBout(xiBoutSEXP);
    Rcpp::traits::input_parameter< double >::type nuBin(nuBinSEXP);
    Rcpp::traits::input_parameter< double >::type nuBout(nuBoutSEXP);
    Rcpp::traits::input_parameter< int >::type Cauchy(CauchySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rnormsVec(rnormsVecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type rnormsBIO(rnormsBIOSEXP);
    rcpp_result_gen = Rcpp::wrap(updateGaussian(Xitm1, dims, tunex, Y, BIN, BOUT, tuneBIO, ww, t2, s2, g2, xiBin, xiBout, nuBin, nuBout, Cauchy, rnormsVec, rnormsBIO));
    return rcpp_result_gen;
END_RCPP
}
// updateNonNegNorm
List updateNonNegNorm(arma::cube Xitm1, Rcpp::IntegerVector dims, double tunex, arma::cube Y, double BIN, double BOUT, double tuneBIO, arma::colvec ww, double t2, double s2, double g2, double xiBin, double xiBout, double nuBin, double nuBout, int Cauchy, Rcpp::NumericVector rnormsVec, arma::colvec rnormsBIO);
RcppExport SEXP lsmdn_updateNonNegNorm(SEXP Xitm1SEXP, SEXP dimsSEXP, SEXP tunexSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneBIOSEXP, SEXP wwSEXP, SEXP t2SEXP, SEXP s2SEXP, SEXP g2SEXP, SEXP xiBinSEXP, SEXP xiBoutSEXP, SEXP nuBinSEXP, SEXP nuBoutSEXP, SEXP CauchySEXP, SEXP rnormsVecSEXP, SEXP rnormsBIOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Xitm1(Xitm1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type tunex(tunexSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneBIO(tuneBIOSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< double >::type xiBin(xiBinSEXP);
    Rcpp::traits::input_parameter< double >::type xiBout(xiBoutSEXP);
    Rcpp::traits::input_parameter< double >::type nuBin(nuBinSEXP);
    Rcpp::traits::input_parameter< double >::type nuBout(nuBoutSEXP);
    Rcpp::traits::input_parameter< int >::type Cauchy(CauchySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rnormsVec(rnormsVecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type rnormsBIO(rnormsBIOSEXP);
    rcpp_result_gen = Rcpp::wrap(updateNonNegNorm(Xitm1, dims, tunex, Y, BIN, BOUT, tuneBIO, ww, t2, s2, g2, xiBin, xiBout, nuBin, nuBout, Cauchy, rnormsVec, rnormsBIO));
    return rcpp_result_gen;
END_RCPP
}
// updatePoisson
List updatePoisson(arma::cube Xitm1, Rcpp::IntegerVector dims, double tunex, arma::cube Y, double BIN, double BOUT, double tuneBIO, arma::colvec ww, double t2, double s2, double xiBin, double xiBout, double nuBin, double nuBout, int Cauchy, Rcpp::NumericVector rnormsVec, arma::colvec rnormsBIO);
RcppExport SEXP lsmdn_updatePoisson(SEXP Xitm1SEXP, SEXP dimsSEXP, SEXP tunexSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneBIOSEXP, SEXP wwSEXP, SEXP t2SEXP, SEXP s2SEXP, SEXP xiBinSEXP, SEXP xiBoutSEXP, SEXP nuBinSEXP, SEXP nuBoutSEXP, SEXP CauchySEXP, SEXP rnormsVecSEXP, SEXP rnormsBIOSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Xitm1(Xitm1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< double >::type tunex(tunexSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneBIO(tuneBIOSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ww(wwSEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< double >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< double >::type xiBin(xiBinSEXP);
    Rcpp::traits::input_parameter< double >::type xiBout(xiBoutSEXP);
    Rcpp::traits::input_parameter< double >::type nuBin(nuBinSEXP);
    Rcpp::traits::input_parameter< double >::type nuBout(nuBoutSEXP);
    Rcpp::traits::input_parameter< int >::type Cauchy(CauchySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rnormsVec(rnormsVecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type rnormsBIO(rnormsBIOSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePoisson(Xitm1, dims, tunex, Y, BIN, BOUT, tuneBIO, ww, t2, s2, xiBin, xiBout, nuBin, nuBout, Cauchy, rnormsVec, rnormsBIO));
    return rcpp_result_gen;
END_RCPP
}
// wAccProb_nnn
List wAccProb_nnn(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double BIN, double BOUT, double tuneW, arma::colvec wwOld, arma::colvec wwNew, double g2);
RcppExport SEXP lsmdn_wAccProb_nnn(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneWSEXP, SEXP wwOldSEXP, SEXP wwNewSEXP, SEXP g2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneW(tuneWSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwOld(wwOldSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwNew(wwNewSEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    rcpp_result_gen = Rcpp::wrap(wAccProb_nnn(X, dims, Y, BIN, BOUT, tuneW, wwOld, wwNew, g2));
    return rcpp_result_gen;
END_RCPP
}
// wAccProbBinom
List wAccProbBinom(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double BIN, double BOUT, double tuneW, arma::colvec wwOld, arma::colvec wwNew);
RcppExport SEXP lsmdn_wAccProbBinom(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneWSEXP, SEXP wwOldSEXP, SEXP wwNewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneW(tuneWSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwOld(wwOldSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwNew(wwNewSEXP);
    rcpp_result_gen = Rcpp::wrap(wAccProbBinom(X, dims, Y, BIN, BOUT, tuneW, wwOld, wwNew));
    return rcpp_result_gen;
END_RCPP
}
// wAccProbGaussian
List wAccProbGaussian(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double BIN, double BOUT, double tuneW, arma::colvec wwOld, arma::colvec wwNew, double g2);
RcppExport SEXP lsmdn_wAccProbGaussian(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneWSEXP, SEXP wwOldSEXP, SEXP wwNewSEXP, SEXP g2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneW(tuneWSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwOld(wwOldSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwNew(wwNewSEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    rcpp_result_gen = Rcpp::wrap(wAccProbGaussian(X, dims, Y, BIN, BOUT, tuneW, wwOld, wwNew, g2));
    return rcpp_result_gen;
END_RCPP
}
// wAccProb_llApprox
List wAccProb_llApprox(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double BIN, double BOUT, double tuneW, arma::colvec wwOld, arma::colvec wwNew, arma::cube ELout, arma::cube ELin, Rcpp::IntegerMatrix subseq, arma::cube degr);
RcppExport SEXP lsmdn_wAccProb_llApprox(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneWSEXP, SEXP wwOldSEXP, SEXP wwNewSEXP, SEXP ELoutSEXP, SEXP ELinSEXP, SEXP subseqSEXP, SEXP degrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneW(tuneWSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwOld(wwOldSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwNew(wwNewSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type ELout(ELoutSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type ELin(ELinSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type subseq(subseqSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type degr(degrSEXP);
    rcpp_result_gen = Rcpp::wrap(wAccProb_llApprox(X, dims, Y, BIN, BOUT, tuneW, wwOld, wwNew, ELout, ELin, subseq, degr));
    return rcpp_result_gen;
END_RCPP
}
// wAccProbNonNegNormal
List wAccProbNonNegNormal(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double BIN, double BOUT, double tuneW, arma::colvec wwOld, arma::colvec wwNew, double g2);
RcppExport SEXP lsmdn_wAccProbNonNegNormal(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneWSEXP, SEXP wwOldSEXP, SEXP wwNewSEXP, SEXP g2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneW(tuneWSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwOld(wwOldSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwNew(wwNewSEXP);
    Rcpp::traits::input_parameter< double >::type g2(g2SEXP);
    rcpp_result_gen = Rcpp::wrap(wAccProbNonNegNormal(X, dims, Y, BIN, BOUT, tuneW, wwOld, wwNew, g2));
    return rcpp_result_gen;
END_RCPP
}
// wAccProbPoisson
List wAccProbPoisson(arma::cube X, Rcpp::IntegerVector dims, arma::cube Y, double BIN, double BOUT, double tuneW, arma::colvec wwOld, arma::colvec wwNew);
RcppExport SEXP lsmdn_wAccProbPoisson(SEXP XSEXP, SEXP dimsSEXP, SEXP YSEXP, SEXP BINSEXP, SEXP BOUTSEXP, SEXP tuneWSEXP, SEXP wwOldSEXP, SEXP wwNewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type BIN(BINSEXP);
    Rcpp::traits::input_parameter< double >::type BOUT(BOUTSEXP);
    Rcpp::traits::input_parameter< double >::type tuneW(tuneWSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwOld(wwOldSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type wwNew(wwNewSEXP);
    rcpp_result_gen = Rcpp::wrap(wAccProbPoisson(X, dims, Y, BIN, BOUT, tuneW, wwOld, wwNew));
    return rcpp_result_gen;
END_RCPP
}
